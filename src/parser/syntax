



Things to fix from haskell: 
    1) No linked lists anymore
    2) No ascii, utf-8 instead
    3) Add asociated types
    4) Flexible type instances by default
    5) Parametrized type classes by default
    6) Macros
    7) if let




import prelude 

trait Logical for t where
    t: (  And t
        & Or t
        & Not t )

trait Arithmetic for t where
    t: (  Add t 
        & Substract t
        & Muliply t
        & Division t
        & Power t )

impl From Complex for String where
    from self = when
        | self.imag < 0  => f"{self.real} - {-self.imag}"
        | otherwise      => f"{self.real} + {self.imag}"




trait Add t0 for t1 where
    type t2
    add : t0 -> t1 -> t2

trait Substract t0 for t1 where
    type t2
    substract : t0 -> t1 -> t2



trait Indexable t0 for t1 where
    type t3
    index : t1 -> t0 -> t3

impl Indexable Int for List t0 where
    type t0 
    index self i = 
        let
            aux self i = when
                | i == 0    => self.head
                | otherwise => aux self.tail (i - 1)

            if i < 0 then
                panic!
            else 
                aux self i


binary operators:

    +
    - (difficult)
    * 
    /
    ** power
    ^  something else?
    @  matrix multiplication
    &

    and 
    or 
    

    
    <<
    >>
    >>= ?
    




rust monad instance example
trait Functor<T0, T1> {
    type Output;
    fn map(self, func: fn(T0) -> T1) -> Self::Output;
}

impl<T0, T1> Functor<T0, T1> for Vec<T0> {
    type Output = Vec<T1>;
    fn map(self, func: fn(T0) -> T1) -> Self::Output {
        let mut output = Vec::new();

        for element in self {
            output.push(func(element))
        }
        output
    }
}


trait Monad<T0, T1> {
    type Mt0;
    type Mt1;
    fn pure(value: T0) -> Self::Mt0;
    fn bind(self, func: fn(T0) ->Self::Mt1) -> Self::Mt1;

}

impl<T0, T1> Monad<T0, T1> for Vec<T0> {
    type Mt0 = Vec<T0>;
    type Mt1 = Vec<T1>;
    fn pure(value: T0) ->Self::Mt0 {
        vec![value]
    }

    fn bind(self, func: fn(T0) ->Self::Mt1) -> Self::Mt1{
        
        let mut out = Vec::new();
        for element in self {
            out.extend(func(element));
        }
        
        out
    }
}


haskell monad instance example


class Monad m where
    bind : 